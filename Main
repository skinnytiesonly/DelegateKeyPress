using System;
using System.Collections.Generic;
using System.Data.OleDb;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
public delegate void Direction();//delegate declared

namespace DelgateKeypress
{
    class Program
    {
        private static int x=20;
        private static int y=20;

        //TBD: You will need to define a data structure to store the association 
        //between the KeyPress and the Action the key should perform
      
        static Dictionary<ConsoleKey, Direction> controls;
       

        private static void Main(string[] args)
        {
            //TBD: Set up your control scheme here. It should look something like this:
            //   myControls.Add(ConsoleKey.W, Up)
            //   myControls.Add(ConsoleKey.S, Down)
            //or you can ask the user which keys they want to use
            //etc

            controls = new Dictionary<ConsoleKey, Direction>();

            //can use WASD
            controls.Add(ConsoleKey.W, Up);
            controls.Add(ConsoleKey.A, Left);
            controls.Add(ConsoleKey.S, Down);
            controls.Add(ConsoleKey.D, Right);

            //Can use Arrow keys
            controls.Add(ConsoleKey.UpArrow, Up);
            controls.Add(ConsoleKey.LeftArrow, Left);
            controls.Add(ConsoleKey.DownArrow, Down);
            controls.Add(ConsoleKey.RightArrow, Right);


            while (true)
            {
                Console.SetCursorPosition(x, y);
                Console.Write("@");

                var key = Console.ReadKey(true);


                int oldX = x;
                int oldY = y;


                //TBD: Replace the following 4 lines by looking up the key press in the data structure
                //and then performing the correct action

                /*      The delegate machanism is used as a Call() parameter within dictionary!
                 *      Searching for a Key will call the corresponding function delegate                    */

                controls[key.Key]();


                Console.SetCursorPosition(oldX, oldY);
                Console.Write("+");


            }
        }

        private static void Right()
        {
            x++;
        }

        private static void Left()
        {
            x--;
        }

        private static void Down()
        {
            y++;
        }

        private static void Up()
        {
            y--;
        }
        
    }
}
